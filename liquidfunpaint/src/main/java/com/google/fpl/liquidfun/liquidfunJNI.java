/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.google.fpl.liquidfun;

public class liquidfunJNI {
  public final static native int B2_ASSERT_ENABLED_get();
  public final static native double _pi_get();
  public final static native int LIQUIDFUN_EXTERNAL_LANGUAGE_API_get();
  public final static native int _maxManifoldPoints_get();
  public final static native int _maxPolygonVertices_get();
  public final static native double _aabbExtension_get();
  public final static native double _aabbMultiplier_get();
  public final static native double _linearSlop_get();
  public final static native double _angularSlop_get();
  public final static native double _polygonRadius_get();
  public final static native int _maxSubSteps_get();
  public final static native int _maxTOIContacts_get();
  public final static native double _velocityThreshold_get();
  public final static native double _maxLinearCorrection_get();
  public final static native double _maxAngularCorrection_get();
  public final static native double _maxTranslation_get();
  public final static native double _maxTranslationSquared_get();
  public final static native double _maxRotation_get();
  public final static native double _maxRotationSquared_get();
  public final static native double _baumgarte_get();
  public final static native double _toiBaugarte_get();
  public final static native int _invalidParticleIndex_get();
  public final static native int _maxParticleIndex_get();
  public final static native double _particleStride_get();
  public final static native double _minParticleWeight_get();
  public final static native double _maxParticlePressure_get();
  public final static native double _maxParticleForce_get();
  public final static native int _maxTriadDistance_get();
  public final static native int _maxTriadDistanceSquared_get();
  public final static native int _minParticleSystemBufferCapacity_get();
  public final static native double _barrierCollisionTime_get();
  public final static native double _timeToSleep_get();
  public final static native double _linearSleepTolerance_get();
  public final static native double _angularSleepTolerance_get();
  public final static native void Version_major_set(long jarg1, Version jarg1_, int jarg2);
  public final static native int Version_major_get(long jarg1, Version jarg1_);
  public final static native void Version_minor_set(long jarg1, Version jarg1_, int jarg2);
  public final static native int Version_minor_get(long jarg1, Version jarg1_);
  public final static native void Version_revision_set(long jarg1, Version jarg1_, int jarg2);
  public final static native int Version_revision_get(long jarg1, Version jarg1_);
  public final static native long new_Version();
  public final static native void delete_Version(long jarg1);
  public final static native void MassData_mass_set(long jarg1, MassData jarg1_, float jarg2);
  public final static native float MassData_mass_get(long jarg1, MassData jarg1_);
  public final static native void MassData_center_set(long jarg1, MassData jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long MassData_center_get(long jarg1, MassData jarg1_);
  public final static native void MassData_I_set(long jarg1, MassData jarg1_, float jarg2);
  public final static native float MassData_I_get(long jarg1, MassData jarg1_);
  public final static native void delete_MassData(long jarg1);
  public final static native void delete_Shape(long jarg1);
  public final static native int Shape_getChildCount(long jarg1, Shape jarg1_);
  public final static native boolean Shape_testPoint(long jarg1, Shape jarg1_, long jarg2, Transform jarg2_, long jarg3, Vec2 jarg3_);
  public final static native void Shape_computeMass(long jarg1, Shape jarg1_, long jarg2, MassData jarg2_, float jarg3);
  public final static native void Shape_type_set(long jarg1, Shape jarg1_, int jarg2);
  public final static native int Shape_type_get(long jarg1, Shape jarg1_);
  public final static native void Shape_radius_set(long jarg1, Shape jarg1_, float jarg2);
  public final static native float Shape_radius_get(long jarg1, Shape jarg1_);
  public final static native long new_CircleShape();
  public final static native void CircleShape_setPosition(long jarg1, CircleShape jarg1_, float jarg2, float jarg3);
  public final static native float CircleShape_getPositionX(long jarg1, CircleShape jarg1_);
  public final static native float CircleShape_getPositionY(long jarg1, CircleShape jarg1_);
  public final static native void delete_CircleShape(long jarg1);
  public final static native long new_EdgeShape();
  public final static native void EdgeShape_set(long jarg1, EdgeShape jarg1_, float jarg2, float jarg3, float jarg4, float jarg5);
  public final static native void delete_EdgeShape(long jarg1);
  public final static native long new_PolygonShape();
  public final static native void PolygonShape_setAsBox__SWIG_0(long jarg1, PolygonShape jarg1_, float jarg2, float jarg3);
  public final static native void PolygonShape_setCentroid(long jarg1, PolygonShape jarg1_, float jarg2, float jarg3);
  public final static native void PolygonShape_setAsBox__SWIG_1(long jarg1, PolygonShape jarg1_, float jarg2, float jarg3, float jarg4, float jarg5, float jarg6);
  public final static native void delete_PolygonShape(long jarg1);
  public final static native long new_Color__SWIG_0();
  public final static native long new_Color__SWIG_1(float jarg1, float jarg2, float jarg3);
  public final static native void Color_set(long jarg1, Color jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void Color_r_set(long jarg1, Color jarg1_, float jarg2);
  public final static native float Color_r_get(long jarg1, Color jarg1_);
  public final static native void Color_g_set(long jarg1, Color jarg1_, float jarg2);
  public final static native float Color_g_get(long jarg1, Color jarg1_);
  public final static native void Color_b_set(long jarg1, Color jarg1_, float jarg2);
  public final static native float Color_b_get(long jarg1, Color jarg1_);
  public final static native void delete_Color(long jarg1);
  public final static native long new_Draw();
  public final static native void delete_Draw(long jarg1);
  public final static native void Draw_setFlags(long jarg1, Draw jarg1_, long jarg2);
  public final static native long Draw_getFlags(long jarg1, Draw jarg1_);
  public final static native void Draw_appendFlags(long jarg1, Draw jarg1_, long jarg2);
  public final static native void Draw_clearFlags(long jarg1, Draw jarg1_, long jarg2);
  public final static native void Draw_drawPolygon(long jarg1, Draw jarg1_, byte[] jarg2, int jarg3, long jarg4, Color jarg4_);
  public final static native void Draw_drawSolidPolygon(long jarg1, Draw jarg1_, byte[] jarg2, int jarg3, long jarg4, Color jarg4_);
  public final static native void Draw_drawCircle(long jarg1, Draw jarg1_, long jarg2, Vec2 jarg2_, float jarg3, long jarg4, Color jarg4_);
  public final static native void Draw_drawSolidCircle(long jarg1, Draw jarg1_, long jarg2, Vec2 jarg2_, float jarg3, long jarg4, Vec2 jarg4_, long jarg5, Color jarg5_);
  public final static native void Draw_drawParticles(long jarg1, Draw jarg1_, byte[] jarg2, float jarg3, byte[] jarg4, int jarg5);
  public final static native void Draw_drawSegment(long jarg1, Draw jarg1_, long jarg2, Vec2 jarg2_, long jarg3, Vec2 jarg3_, long jarg4, Color jarg4_);
  public final static native void Draw_drawTransform(long jarg1, Draw jarg1_, long jarg2, Transform jarg2_);
  public final static native void Draw_director_connect(Draw obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void Draw_change_ownership(Draw obj, long cptr, boolean take_or_release);
  public final static native long new_Vec2__SWIG_0();
  public final static native long new_Vec2__SWIG_1(float jarg1, float jarg2);
  public final static native void Vec2_set(long jarg1, Vec2 jarg1_, float jarg2, float jarg3);
  public final static native void Vec2_x_set(long jarg1, Vec2 jarg1_, float jarg2);
  public final static native float Vec2_x_get(long jarg1, Vec2 jarg1_);
  public final static native void Vec2_y_set(long jarg1, Vec2 jarg1_, float jarg2);
  public final static native float Vec2_y_get(long jarg1, Vec2 jarg1_);
  public final static native void delete_Vec2(long jarg1);
  public final static native long new_Transform();
  public final static native void Transform_setIdentity(long jarg1, Transform jarg1_);
  public final static native float Transform_getPositionX(long jarg1, Transform jarg1_);
  public final static native float Transform_getPositionY(long jarg1, Transform jarg1_);
  public final static native float Transform_getRotationSin(long jarg1, Transform jarg1_);
  public final static native float Transform_getRotationCos(long jarg1, Transform jarg1_);
  public final static native void delete_Transform(long jarg1);
  public final static native long new_BodyDef();
  public final static native void BodyDef_setPosition(long jarg1, BodyDef jarg1_, float jarg2, float jarg3);
  public final static native void BodyDef_type_set(long jarg1, BodyDef jarg1_, int jarg2);
  public final static native int BodyDef_type_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_position_set(long jarg1, BodyDef jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long BodyDef_position_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_angle_set(long jarg1, BodyDef jarg1_, float jarg2);
  public final static native float BodyDef_angle_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_linearVelocity_set(long jarg1, BodyDef jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long BodyDef_linearVelocity_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_angularVelocity_set(long jarg1, BodyDef jarg1_, float jarg2);
  public final static native float BodyDef_angularVelocity_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_linearDamping_set(long jarg1, BodyDef jarg1_, float jarg2);
  public final static native float BodyDef_linearDamping_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_angularDamping_set(long jarg1, BodyDef jarg1_, float jarg2);
  public final static native float BodyDef_angularDamping_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_allowSleep_set(long jarg1, BodyDef jarg1_, boolean jarg2);
  public final static native boolean BodyDef_allowSleep_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_awake_set(long jarg1, BodyDef jarg1_, boolean jarg2);
  public final static native boolean BodyDef_awake_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_fixedRotation_set(long jarg1, BodyDef jarg1_, boolean jarg2);
  public final static native boolean BodyDef_fixedRotation_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_bullet_set(long jarg1, BodyDef jarg1_, boolean jarg2);
  public final static native boolean BodyDef_bullet_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_active_set(long jarg1, BodyDef jarg1_, boolean jarg2);
  public final static native boolean BodyDef_active_get(long jarg1, BodyDef jarg1_);
  public final static native void BodyDef_gravityScale_set(long jarg1, BodyDef jarg1_, float jarg2);
  public final static native float BodyDef_gravityScale_get(long jarg1, BodyDef jarg1_);
  public final static native void delete_BodyDef(long jarg1);
  public final static native long Body_createFixture__SWIG_0(long jarg1, Body jarg1_, long jarg2, FixtureDef jarg2_);
  public final static native long Body_createFixture__SWIG_1(long jarg1, Body jarg1_, long jarg2, Shape jarg2_, float jarg3);
  public final static native void Body_destroyFixture(long jarg1, Body jarg1_, long jarg2, Fixture jarg2_);
  public final static native void Body_setTransform__SWIG_0(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_, float jarg3);
  public final static native long Body_getTransform(long jarg1, Body jarg1_);
  public final static native long Body_getPosition(long jarg1, Body jarg1_);
  public final static native float Body_getAngle(long jarg1, Body jarg1_);
  public final static native long Body_getWorldCenter(long jarg1, Body jarg1_);
  public final static native long Body_getLocalCenter(long jarg1, Body jarg1_);
  public final static native void Body_setLinearVelocity(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long Body_getLinearVelocity(long jarg1, Body jarg1_);
  public final static native void Body_setAngularVelocity(long jarg1, Body jarg1_, float jarg2);
  public final static native float Body_getAngularVelocity(long jarg1, Body jarg1_);
  public final static native void Body_applyForce(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_, long jarg3, Vec2 jarg3_, boolean jarg4);
  public final static native void Body_applyForceToCenter(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_, boolean jarg3);
  public final static native void Body_applyTorque(long jarg1, Body jarg1_, float jarg2, boolean jarg3);
  public final static native void Body_applyLinearImpulse(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_, long jarg3, Vec2 jarg3_, boolean jarg4);
  public final static native void Body_applyAngularImpulse(long jarg1, Body jarg1_, float jarg2, boolean jarg3);
  public final static native float Body_getMass(long jarg1, Body jarg1_);
  public final static native float Body_getInertia(long jarg1, Body jarg1_);
  public final static native void Body_getMassData(long jarg1, Body jarg1_, long jarg2, MassData jarg2_);
  public final static native void Body_setMassData(long jarg1, Body jarg1_, long jarg2, MassData jarg2_);
  public final static native void Body_resetMassData(long jarg1, Body jarg1_);
  public final static native long Body_getWorldPoint(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long Body_getWorldVector(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long Body_getLocalPoint(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long Body_getLocalVector(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long Body_getLinearVelocityFromWorldPoint(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long Body_getLinearVelocityFromLocalPoint(long jarg1, Body jarg1_, long jarg2, Vec2 jarg2_);
  public final static native float Body_getLinearDamping(long jarg1, Body jarg1_);
  public final static native void Body_setLinearDamping(long jarg1, Body jarg1_, float jarg2);
  public final static native float Body_getAngularDamping(long jarg1, Body jarg1_);
  public final static native void Body_setAngularDamping(long jarg1, Body jarg1_, float jarg2);
  public final static native float Body_getGravityScale(long jarg1, Body jarg1_);
  public final static native void Body_setGravityScale(long jarg1, Body jarg1_, float jarg2);
  public final static native void Body_setType(long jarg1, Body jarg1_, int jarg2);
  public final static native int Body_getType(long jarg1, Body jarg1_);
  public final static native void Body_setBullet(long jarg1, Body jarg1_, boolean jarg2);
  public final static native boolean Body_isBullet(long jarg1, Body jarg1_);
  public final static native void Body_setSleepingAllowed(long jarg1, Body jarg1_, boolean jarg2);
  public final static native boolean Body_isSleepingAllowed(long jarg1, Body jarg1_);
  public final static native void Body_setAwake(long jarg1, Body jarg1_, boolean jarg2);
  public final static native boolean Body_isAwake(long jarg1, Body jarg1_);
  public final static native void Body_setActive(long jarg1, Body jarg1_, boolean jarg2);
  public final static native boolean Body_isActive(long jarg1, Body jarg1_);
  public final static native void Body_setFixedRotation(long jarg1, Body jarg1_, boolean jarg2);
  public final static native boolean Body_isFixedRotation(long jarg1, Body jarg1_);
  public final static native long Body_getFixtureList__SWIG_0(long jarg1, Body jarg1_);
  public final static native long Body_getJointList__SWIG_0(long jarg1, Body jarg1_);
  public final static native long Body_getContactList__SWIG_0(long jarg1, Body jarg1_);
  public final static native long Body_getNext__SWIG_0(long jarg1, Body jarg1_);
  public final static native long Body_getWorld__SWIG_0(long jarg1, Body jarg1_);
  public final static native void Body_dump(long jarg1, Body jarg1_);
  public final static native float Body_getPositionX(long jarg1, Body jarg1_);
  public final static native float Body_getPositionY(long jarg1, Body jarg1_);
  public final static native void Body_setTransform__SWIG_1(long jarg1, Body jarg1_, float jarg2, float jarg3, float jarg4);
  public final static native void FixtureDef_shape_set(long jarg1, FixtureDef jarg1_, long jarg2, Shape jarg2_);
  public final static native long FixtureDef_shape_get(long jarg1, FixtureDef jarg1_);
  public final static native long new_FixtureDef();
  public final static native void delete_FixtureDef(long jarg1);
  public final static native long new_World(float jarg1, float jarg2);
  public final static native void delete_World(long jarg1);
  public final static native void World_setDebugDraw(long jarg1, World jarg1_, long jarg2, Draw jarg2_);
  public final static native long World_createBody(long jarg1, World jarg1_, long jarg2, BodyDef jarg2_);
  public final static native void World_destroyBody(long jarg1, World jarg1_, long jarg2, Body jarg2_);
  public final static native void World_step(long jarg1, World jarg1_, float jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void World_drawDebugData(long jarg1, World jarg1_);
  public final static native int World_getBodyCount(long jarg1, World jarg1_);
  public final static native long World_createParticleSystem(long jarg1, World jarg1_, long jarg2, ParticleSystemDef jarg2_);
  public final static native void World_setGravity(long jarg1, World jarg1_, float jarg2, float jarg3);
  public final static native long new_QueryCallback();
  public final static native void delete_QueryCallback(long jarg1);
  public final static native boolean QueryCallback_reportFixture(long jarg1, QueryCallback jarg1_, long jarg2, Fixture jarg2_);
  public final static native boolean QueryCallback_reportParticle(long jarg1, QueryCallback jarg1_, long jarg2, ParticleSystem jarg2_, int jarg3);
  public final static native boolean QueryCallback_reportParticleSwigExplicitQueryCallback(long jarg1, QueryCallback jarg1_, long jarg2, ParticleSystem jarg2_, int jarg3);
  public final static native void QueryCallback_director_connect(QueryCallback obj, long cptr, boolean mem_own, boolean weak_global);
  public final static native void QueryCallback_change_ownership(QueryCallback obj, long cptr, boolean take_or_release);
  public final static native long new_ParticleColor__SWIG_0();
  public final static native long new_ParticleColor__SWIG_1(short jarg1, short jarg2, short jarg3, short jarg4);
  public final static native long new_ParticleColor__SWIG_2(long jarg1, Color jarg1_);
  public final static native boolean ParticleColor_isZero(long jarg1, ParticleColor jarg1_);
  public final static native void ParticleColor_set__SWIG_0(long jarg1, ParticleColor jarg1_, short jarg2, short jarg3, short jarg4, short jarg5);
  public final static native void ParticleColor_set__SWIG_1(long jarg1, ParticleColor jarg1_, long jarg2, Color jarg2_);
  public final static native boolean ParticleColor_equals(long jarg1, ParticleColor jarg1_, long jarg2, ParticleColor jarg2_);
  public final static native void ParticleColor_mix(long jarg1, ParticleColor jarg1_, long jarg2, ParticleColor jarg2_, int jarg3);
  public final static native void ParticleColor_mixColors(long jarg1, ParticleColor jarg1_, long jarg2, ParticleColor jarg2_, int jarg3);
  public final static native void ParticleColor_r_set(long jarg1, ParticleColor jarg1_, short jarg2);
  public final static native short ParticleColor_r_get(long jarg1, ParticleColor jarg1_);
  public final static native void ParticleColor_g_set(long jarg1, ParticleColor jarg1_, short jarg2);
  public final static native short ParticleColor_g_get(long jarg1, ParticleColor jarg1_);
  public final static native void ParticleColor_b_set(long jarg1, ParticleColor jarg1_, short jarg2);
  public final static native short ParticleColor_b_get(long jarg1, ParticleColor jarg1_);
  public final static native void ParticleColor_a_set(long jarg1, ParticleColor jarg1_, short jarg2);
  public final static native short ParticleColor_a_get(long jarg1, ParticleColor jarg1_);
  public final static native void delete_ParticleColor(long jarg1);
  public final static native void b2ParticleColor_zero_set(long jarg1, ParticleColor jarg1_);
  public final static native long b2ParticleColor_zero_get();
  public final static native long new_ParticleDef();
  public final static native void ParticleDef_setPosition(long jarg1, ParticleDef jarg1_, float jarg2, float jarg3);
  public final static native void ParticleDef_setColor(long jarg1, ParticleDef jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native void ParticleDef_flags_set(long jarg1, ParticleDef jarg1_, long jarg2);
  public final static native long ParticleDef_flags_get(long jarg1, ParticleDef jarg1_);
  public final static native void ParticleDef_position_set(long jarg1, ParticleDef jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long ParticleDef_position_get(long jarg1, ParticleDef jarg1_);
  public final static native void ParticleDef_velocity_set(long jarg1, ParticleDef jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long ParticleDef_velocity_get(long jarg1, ParticleDef jarg1_);
  public final static native void ParticleDef_color_set(long jarg1, ParticleDef jarg1_, long jarg2, ParticleColor jarg2_);
  public final static native long ParticleDef_color_get(long jarg1, ParticleDef jarg1_);
  public final static native void ParticleDef_lifetime_set(long jarg1, ParticleDef jarg1_, float jarg2);
  public final static native float ParticleDef_lifetime_get(long jarg1, ParticleDef jarg1_);
  public final static native void ParticleDef_group_set(long jarg1, ParticleDef jarg1_, long jarg2, ParticleGroup jarg2_);
  public final static native long ParticleDef_group_get(long jarg1, ParticleDef jarg1_);
  public final static native void delete_ParticleDef(long jarg1);
  public final static native int b2CalculateParticleIterations(float jarg1, float jarg2, float jarg3);
  public final static native long ParticleGroup_getNext(long jarg1, ParticleGroup jarg1_);
  public final static native int ParticleGroup_getParticleCount(long jarg1, ParticleGroup jarg1_);
  public final static native int ParticleGroup_getBufferIndex(long jarg1, ParticleGroup jarg1_);
  public final static native int ParticleGroup_getGroupFlags(long jarg1, ParticleGroup jarg1_);
  public final static native long new_ParticleGroupDef();
  public final static native void delete_ParticleGroupDef(long jarg1);
  public final static native void ParticleGroupDef_flags_set(long jarg1, ParticleGroupDef jarg1_, long jarg2);
  public final static native long ParticleGroupDef_flags_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_groupFlags_set(long jarg1, ParticleGroupDef jarg1_, long jarg2);
  public final static native long ParticleGroupDef_groupFlags_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_position_set(long jarg1, ParticleGroupDef jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long ParticleGroupDef_position_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_angle_set(long jarg1, ParticleGroupDef jarg1_, float jarg2);
  public final static native float ParticleGroupDef_angle_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_linearVelocity_set(long jarg1, ParticleGroupDef jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long ParticleGroupDef_linearVelocity_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_angularVelocity_set(long jarg1, ParticleGroupDef jarg1_, float jarg2);
  public final static native float ParticleGroupDef_angularVelocity_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_color_set(long jarg1, ParticleGroupDef jarg1_, long jarg2, ParticleColor jarg2_);
  public final static native long ParticleGroupDef_color_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_strength_set(long jarg1, ParticleGroupDef jarg1_, float jarg2);
  public final static native float ParticleGroupDef_strength_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_shape_set(long jarg1, ParticleGroupDef jarg1_, long jarg2, Shape jarg2_);
  public final static native long ParticleGroupDef_shape_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_shapeCount_set(long jarg1, ParticleGroupDef jarg1_, int jarg2);
  public final static native int ParticleGroupDef_shapeCount_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_stride_set(long jarg1, ParticleGroupDef jarg1_, float jarg2);
  public final static native float ParticleGroupDef_stride_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_particleCount_set(long jarg1, ParticleGroupDef jarg1_, int jarg2);
  public final static native int ParticleGroupDef_particleCount_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_positionData_set(long jarg1, ParticleGroupDef jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long ParticleGroupDef_positionData_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_lifetime_set(long jarg1, ParticleGroupDef jarg1_, float jarg2);
  public final static native float ParticleGroupDef_lifetime_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_group_set(long jarg1, ParticleGroupDef jarg1_, long jarg2, ParticleGroup jarg2_);
  public final static native long ParticleGroupDef_group_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_circleShapes_set(long jarg1, ParticleGroupDef jarg1_, long jarg2, CircleShape jarg2_);
  public final static native long ParticleGroupDef_circleShapes_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_ownShapesArray_set(long jarg1, ParticleGroupDef jarg1_, boolean jarg2);
  public final static native boolean ParticleGroupDef_ownShapesArray_get(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_freeShapesMemory(long jarg1, ParticleGroupDef jarg1_);
  public final static native void ParticleGroupDef_setCircleShapesFromVertexList(long jarg1, ParticleGroupDef jarg1_, java.nio.ByteBuffer jarg2, int jarg3, float jarg4);
  public final static native void ParticleGroupDef_setPosition(long jarg1, ParticleGroupDef jarg1_, float jarg2, float jarg3);
  public final static native void ParticleGroupDef_setColor(long jarg1, ParticleGroupDef jarg1_, int jarg2, int jarg3, int jarg4, int jarg5);
  public final static native int ParticleSystem_createParticle(long jarg1, ParticleSystem jarg1_, long jarg2, ParticleDef jarg2_);
  public final static native void ParticleSystem_joinParticleGroups(long jarg1, ParticleSystem jarg1_, long jarg2, ParticleGroup jarg2_, long jarg3, ParticleGroup jarg3_);
  public final static native long ParticleSystem_getParticleGroupList(long jarg1, ParticleSystem jarg1_);
  public final static native void ParticleSystem_destroyParticlesInShape(long jarg1, ParticleSystem jarg1_, long jarg2, Shape jarg2_, long jarg3, Transform jarg3_);
  public final static native long ParticleSystem_createParticleGroup(long jarg1, ParticleSystem jarg1_, long jarg2, ParticleGroupDef jarg2_);
  public final static native int ParticleSystem_getParticleGroupCount(long jarg1, ParticleSystem jarg1_);
  public final static native int ParticleSystem_getParticleCount(long jarg1, ParticleSystem jarg1_);
  public final static native void ParticleSystem_setMaxParticleCount(long jarg1, ParticleSystem jarg1_, int jarg2);
  public final static native void ParticleSystem_setDamping(long jarg1, ParticleSystem jarg1_, float jarg2);
  public final static native void ParticleSystem_setRadius(long jarg1, ParticleSystem jarg1_, float jarg2);
  public final static native void ParticleSystem_queryShapeAABB(long jarg1, ParticleSystem jarg1_, long jarg2, QueryCallback jarg2_, long jarg3, Shape jarg3_, long jarg4, Transform jarg4_);
  public final static native void ParticleSystem_setParticleVelocity(long jarg1, ParticleSystem jarg1_, int jarg2, float jarg3, float jarg4);
  public final static native float ParticleSystem_getParticlePositionX(long jarg1, ParticleSystem jarg1_, int jarg2);
  public final static native float ParticleSystem_getParticlePositionY(long jarg1, ParticleSystem jarg1_, int jarg2);
  public final static native int ParticleSystem_copyPositionBuffer(long jarg1, ParticleSystem jarg1_, int jarg2, int jarg3, java.nio.ByteBuffer jarg4);
  public final static native int ParticleSystem_copyColorBuffer(long jarg1, ParticleSystem jarg1_, int jarg2, int jarg3, java.nio.ByteBuffer jarg4);
  public final static native int ParticleSystem_copyWeightBuffer(long jarg1, ParticleSystem jarg1_, int jarg2, int jarg3, java.nio.ByteBuffer jarg4);
  public final static native void ParticlePair_indexA_set(long jarg1, ParticlePair jarg1_, int jarg2);
  public final static native int ParticlePair_indexA_get(long jarg1, ParticlePair jarg1_);
  public final static native void ParticlePair_indexB_set(long jarg1, ParticlePair jarg1_, int jarg2);
  public final static native int ParticlePair_indexB_get(long jarg1, ParticlePair jarg1_);
  public final static native void ParticlePair_flags_set(long jarg1, ParticlePair jarg1_, long jarg2);
  public final static native long ParticlePair_flags_get(long jarg1, ParticlePair jarg1_);
  public final static native void ParticlePair_strength_set(long jarg1, ParticlePair jarg1_, float jarg2);
  public final static native float ParticlePair_strength_get(long jarg1, ParticlePair jarg1_);
  public final static native void ParticlePair_distance_set(long jarg1, ParticlePair jarg1_, float jarg2);
  public final static native float ParticlePair_distance_get(long jarg1, ParticlePair jarg1_);
  public final static native long new_ParticlePair();
  public final static native void delete_ParticlePair(long jarg1);
  public final static native void ParticleTriad_indexA_set(long jarg1, ParticleTriad jarg1_, int jarg2);
  public final static native int ParticleTriad_indexA_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_indexB_set(long jarg1, ParticleTriad jarg1_, int jarg2);
  public final static native int ParticleTriad_indexB_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_indexC_set(long jarg1, ParticleTriad jarg1_, int jarg2);
  public final static native int ParticleTriad_indexC_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_flags_set(long jarg1, ParticleTriad jarg1_, long jarg2);
  public final static native long ParticleTriad_flags_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_strength_set(long jarg1, ParticleTriad jarg1_, float jarg2);
  public final static native float ParticleTriad_strength_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_pa_set(long jarg1, ParticleTriad jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long ParticleTriad_pa_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_pb_set(long jarg1, ParticleTriad jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long ParticleTriad_pb_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_pc_set(long jarg1, ParticleTriad jarg1_, long jarg2, Vec2 jarg2_);
  public final static native long ParticleTriad_pc_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_ka_set(long jarg1, ParticleTriad jarg1_, float jarg2);
  public final static native float ParticleTriad_ka_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_kb_set(long jarg1, ParticleTriad jarg1_, float jarg2);
  public final static native float ParticleTriad_kb_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_kc_set(long jarg1, ParticleTriad jarg1_, float jarg2);
  public final static native float ParticleTriad_kc_get(long jarg1, ParticleTriad jarg1_);
  public final static native void ParticleTriad_s_set(long jarg1, ParticleTriad jarg1_, float jarg2);
  public final static native float ParticleTriad_s_get(long jarg1, ParticleTriad jarg1_);
  public final static native long new_ParticleTriad();
  public final static native void delete_ParticleTriad(long jarg1);
  public final static native long new_ParticleSystemDef();
  public final static native void ParticleSystemDef_strictContactCheck_set(long jarg1, ParticleSystemDef jarg1_, boolean jarg2);
  public final static native boolean ParticleSystemDef_strictContactCheck_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_density_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_density_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_gravityScale_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_gravityScale_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_radius_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_radius_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_maxCount_set(long jarg1, ParticleSystemDef jarg1_, int jarg2);
  public final static native int ParticleSystemDef_maxCount_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_pressureStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_pressureStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_dampingStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_dampingStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_elasticStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_elasticStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_springStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_springStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_viscousStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_viscousStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_surfaceTensionPressureStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_surfaceTensionPressureStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_surfaceTensionNormalStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_surfaceTensionNormalStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_repulsiveStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_repulsiveStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_powderStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_powderStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_ejectionStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_ejectionStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_staticPressureStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_staticPressureStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_staticPressureRelaxation_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_staticPressureRelaxation_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_staticPressureIterations_set(long jarg1, ParticleSystemDef jarg1_, int jarg2);
  public final static native int ParticleSystemDef_staticPressureIterations_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_colorMixingStrength_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_colorMixingStrength_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_destroyByAge_set(long jarg1, ParticleSystemDef jarg1_, boolean jarg2);
  public final static native boolean ParticleSystemDef_destroyByAge_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void ParticleSystemDef_lifetimeGranularity_set(long jarg1, ParticleSystemDef jarg1_, float jarg2);
  public final static native float ParticleSystemDef_lifetimeGranularity_get(long jarg1, ParticleSystemDef jarg1_);
  public final static native void delete_ParticleSystemDef(long jarg1);
  public final static native long CircleShape_SWIGUpcast(long jarg1);
  public final static native long EdgeShape_SWIGUpcast(long jarg1);
  public final static native long PolygonShape_SWIGUpcast(long jarg1);

  public static void SwigDirector_Draw_drawPolygon(Draw jself, byte[] vertices, int vertexCount, long color) {
    jself.drawPolygon(vertices, vertexCount, new Color(color, false));
  }
  public static void SwigDirector_Draw_drawSolidPolygon(Draw jself, byte[] vertices, int vertexCount, long color) {
    jself.drawSolidPolygon(vertices, vertexCount, new Color(color, false));
  }
  public static void SwigDirector_Draw_drawCircle(Draw jself, long center, float radius, long color) {
    jself.drawCircle(new Vec2(center, false), radius, new Color(color, false));
  }
  public static void SwigDirector_Draw_drawSolidCircle(Draw jself, long center, float radius, long axis, long color) {
    jself.drawSolidCircle(new Vec2(center, false), radius, new Vec2(axis, false), new Color(color, false));
  }
  public static void SwigDirector_Draw_drawParticles(Draw jself, byte[] centers, float radius, byte[] colors, int count) {
    jself.drawParticles(centers, radius, colors, count);
  }
  public static void SwigDirector_Draw_drawSegment(Draw jself, long p1, long p2, long color) {
    jself.drawSegment(new Vec2(p1, false), new Vec2(p2, false), new Color(color, false));
  }
  public static void SwigDirector_Draw_drawTransform(Draw jself, long xf) {
    jself.drawTransform(new Transform(xf, false));
  }
  public static boolean SwigDirector_QueryCallback_reportFixture(QueryCallback jself, long fixture) {
    return jself.reportFixture((fixture == 0) ? null : new Fixture(fixture, false));
  }
  public static boolean SwigDirector_QueryCallback_reportParticle(QueryCallback jself, long particleSystem, int index) {
    return jself.reportParticle((particleSystem == 0) ? null : new ParticleSystem(particleSystem, false), index);
  }

  private final static native void swig_module_init();
  static {
    swig_module_init();
  }
}
